import numpy as np
import cv2
import matplotlib.pyplot as plt
import math
from datetime import datetime
import matplotlib


def cal_route(old, M):
    new_route = {}
    for time, point in old.items():
        Z = M[2, 0] * point[0] + M[2, 1] * point[1] + M[2, 2]
        tempX = (M[0, 0] * point[0] + M[0, 1] * point[1] + M[0, 2]) // Z
        tempY = (M[1, 0] * point[0] + M[1, 1] * point[1] + M[1, 2]) // Z
        new_point = [int(tempX), int(tempY)]
        new_route[time] = new_point
    print(new_route)
    return new_route


def cal_perspective_params(img, points):
    src = np.float32(points)
    # 俯视图中四点的位置
    dst = np.float32([[263, 336], [436, 331], [263, 385], [436, 385]])
    # 从原始图像转换为俯视图的透视变换的参数矩阵
    M = cv2.getPerspectiveTransform(src, dst)
    # 从俯视图转换为原始图像的透视变换参数矩阵
    M_inverse = cv2.getPerspectiveTransform(dst, src)
    return M, M_inverse


def img_perspect_transform(img, M):
    img_size = (img.shape[1], img.shape[0])
    return cv2.warpPerspective(img, M, img_size)


if __name__ == "__main__":
    img = cv2.imread("E:\\repos\\Vehicle-tracking\\videos\\sample2_Moment.jpg")

    old_route = {datetime(2022, 6, 29, 8, 1, 49, 101160): (542, 324),
                 datetime(2022, 6, 29, 8, 1, 49, 123947): (540, 320),
                 datetime(2022, 6, 29, 8, 1, 49, 146885): (539, 324),
                 datetime(2022, 6, 29, 8, 1, 49, 169511): (537, 314),
                 datetime(2022, 6, 29, 8, 1, 49, 193743): (535, 309),
                 datetime(2022, 6, 29, 8, 1, 49, 214700): (533, 307),
                 datetime(2022, 6, 29, 8, 1, 49, 236092): (533, 306),
                 datetime(2022, 6, 29, 8, 1, 49, 257090): (531, 305),
                 datetime(2022, 6, 29, 8, 1, 49, 278689): (530, 303),
                 datetime(2022, 6, 29, 8, 1, 49, 301115): (529, 302),
                 datetime(2022, 6, 29, 8, 1, 49, 322470): (527, 294),
                 datetime(2022, 6, 29, 8, 1, 49, 345576): (526, 289),
                 datetime(2022, 6, 29, 8, 1, 49, 369834): (526, 287),
                 datetime(2022, 6, 29, 8, 1, 49, 393734): (524, 284),
                 datetime(2022, 6, 29, 8, 1, 49, 417180): (524, 282),
                 datetime(2022, 6, 29, 8, 1, 49, 440447): (524, 280),
                 datetime(2022, 6, 29, 8, 1, 49, 464431): (523, 280),
                 datetime(2022, 6, 29, 8, 1, 49, 486721): (523, 279),
                 datetime(2022, 6, 29, 8, 1, 49, 508684): (523, 278),
                 datetime(2022, 6, 29, 8, 1, 49, 529480): (521, 275),
                 datetime(2022, 6, 29, 8, 1, 49, 550966): (520, 274),
                 datetime(2022, 6, 29, 8, 1, 49, 575819): (520, 273),
                 datetime(2022, 6, 29, 8, 1, 49, 596626): (518, 270),
                 datetime(2022, 6, 29, 8, 1, 49, 620195): (517, 267),
                 datetime(2022, 6, 29, 8, 1, 49, 644192): (516, 267),
                 datetime(2022, 6, 29, 8, 1, 49, 668030): (516, 266),
                 datetime(2022, 6, 29, 8, 1, 49, 690076): (515, 263),
                 datetime(2022, 6, 29, 8, 1, 49, 712102): (515, 260),
                 datetime(2022, 6, 29, 8, 1, 49, 735348): (514, 259),
                 datetime(2022, 6, 29, 8, 1, 49, 757689): (514, 256),
                 datetime(2022, 6, 29, 8, 1, 49, 779383): (513, 255),
                 datetime(2022, 6, 29, 8, 1, 49, 800246): (513, 254),
                 datetime(2022, 6, 29, 8, 1, 49, 821316): (512, 251),
                 datetime(2022, 6, 29, 8, 1, 49, 842271): (511, 249),
                 datetime(2022, 6, 29, 8, 1, 49, 864139): (511, 247),
                 datetime(2022, 6, 29, 8, 1, 49, 888585): (510, 245),
                 datetime(2022, 6, 29, 8, 1, 49, 910598): (510, 245),
                 datetime(2022, 6, 29, 8, 1, 49, 931372): (510, 244),
                 datetime(2022, 6, 29, 8, 1, 49, 953015): (509, 243),
                 datetime(2022, 6, 29, 8, 1, 49, 979785): (509, 241),
                 datetime(2022, 6, 29, 8, 1, 50, 1616): (508, 240),
                 datetime(2022, 6, 29, 8, 1, 50, 23298): (507, 239),
                 datetime(2022, 6, 29, 8, 1, 50, 44055): (507, 240),
                 datetime(2022, 6, 29, 8, 1, 50, 66879): (507, 238),
                 datetime(2022, 6, 29, 8, 1, 50, 89048): (506, 236),
                 datetime(2022, 6, 29, 8, 1, 50, 112693): (505, 234),
                 datetime(2022, 6, 29, 8, 1, 50, 133588): (505, 232),
                 datetime(2022, 6, 29, 8, 1, 50, 157179): (505, 230),
                 datetime(2022, 6, 29, 8, 1, 50, 182678): (505, 229),
                 datetime(2022, 6, 29, 8, 1, 50, 203992): (504, 228),
                 datetime(2022, 6, 29, 8, 1, 50, 227689): (503, 228),
                 datetime(2022, 6, 29, 8, 1, 50, 251268): (503, 226),
                 datetime(2022, 6, 29, 8, 1, 50, 275086): (502, 225),
                 datetime(2022, 6, 29, 8, 1, 50, 295178): (502, 223),
                 datetime(2022, 6, 29, 8, 1, 50, 347661): (502, 221),
                 datetime(2022, 6, 29, 8, 1, 50, 369312): (501, 219),
                 datetime(2022, 6, 29, 8, 1, 50, 392534): (501, 216),
                 datetime(2022, 6, 29, 8, 1, 50, 414395): (501, 214),
                 datetime(2022, 6, 29, 8, 1, 50, 484351): (500, 209),
                 datetime(2022, 6, 29, 8, 1, 50, 551864): (500, 204),
                 datetime(2022, 6, 29, 8, 1, 50, 702654): (499, 195),
                 datetime(2022, 6, 29, 8, 1, 50, 723581): (498, 193),
                 datetime(2022, 6, 29, 8, 1, 50, 743326): (498, 192),
                 datetime(2022, 6, 29, 8, 1, 50, 804199): (497, 191),
                 datetime(2022, 6, 29, 8, 1, 51, 40240): (496, 182),
                 datetime(2022, 6, 29, 8, 1, 51, 60787): (496, 182),
                 datetime(2022, 6, 29, 8, 1, 51, 82888): (497, 177),
                 datetime(2022, 6, 29, 8, 1, 51, 103522): (497, 176),
                 datetime(2022, 6, 29, 8, 1, 51, 124543): (497, 175),
                 datetime(2022, 6, 29, 8, 1, 51, 147026): (498, 174),
                 datetime(2022, 6, 29, 8, 1, 51, 168842): (498, 175),
                 datetime(2022, 6, 29, 8, 1, 51, 191848): (498, 174),
                 datetime(2022, 6, 29, 8, 1, 51, 212842): (500, 174),
                 datetime(2022, 6, 29, 8, 1, 51, 234189): (500, 174),
                 datetime(2022, 6, 29, 8, 1, 51, 254638): (502, 175),
                 datetime(2022, 6, 29, 8, 1, 51, 276396): (502, 174),
                 datetime(2022, 6, 29, 8, 1, 51, 303048): (502, 173),
                 datetime(2022, 6, 29, 8, 1, 51, 323922): (503, 172),
                 datetime(2022, 6, 29, 8, 1, 51, 345581): (504, 169),
                 datetime(2022, 6, 29, 8, 1, 51, 366537): (504, 168),
                 datetime(2022, 6, 29, 8, 1, 51, 387311): (505, 167),
                 datetime(2022, 6, 29, 8, 1, 51, 408396): (506, 165),
                 datetime(2022, 6, 29, 8, 1, 51, 491444): (510, 162),
                 datetime(2022, 6, 29, 8, 1, 51, 543735): (513, 161),
                 datetime(2022, 6, 29, 8, 1, 51, 567266): (514, 161),
                 datetime(2022, 6, 29, 8, 1, 51, 646480): (517, 159),
                 datetime(2022, 6, 29, 8, 1, 51, 668446): (518, 159),
                 datetime(2022, 6, 29, 8, 1, 51, 714623): (519, 158),
                 datetime(2022, 6, 29, 8, 1, 51, 736513): (519, 158),
                 datetime(2022, 6, 29, 8, 1, 51, 827327): (524, 154),
                 datetime(2022, 6, 29, 8, 1, 51, 849574): (525, 153),
                 datetime(2022, 6, 29, 8, 1, 51, 871243): (525, 152),
                 datetime(2022, 6, 29, 8, 1, 51, 897389): (526, 153),
                 datetime(2022, 6, 29, 8, 1, 51, 922427): (528, 153),
                 datetime(2022, 6, 29, 8, 1, 51, 945201): (531, 153),
                 datetime(2022, 6, 29, 8, 1, 51, 969252): (532, 153),
                 datetime(2022, 6, 29, 8, 1, 51, 994373): (533, 152),
                 datetime(2022, 6, 29, 8, 1, 52, 24209): (536, 151),
                 datetime(2022, 6, 29, 8, 1, 52, 46364): (538, 150),
                 datetime(2022, 6, 29, 8, 1, 52, 68363): (540, 149),
                 datetime(2022, 6, 29, 8, 1, 52, 92553): (540, 148),
                 datetime(2022, 6, 29, 8, 1, 52, 116337): (541, 148),
                 datetime(2022, 6, 29, 8, 1, 52, 181441): (543, 148),
                 datetime(2022, 6, 29, 8, 1, 52, 206344): (544, 149),
                 datetime(2022, 6, 29, 8, 1, 52, 227906): (545, 148),
                 datetime(2022, 6, 29, 8, 1, 52, 294039): (549, 147),
                 datetime(2022, 6, 29, 8, 1, 52, 316220): (550, 146),
                 datetime(2022, 6, 29, 8, 1, 52, 337504): (551, 146),
                 datetime(2022, 6, 29, 8, 1, 52, 578380): (572, 137),
                 datetime(2022, 6, 29, 8, 1, 52, 600097): (574, 137),
                 datetime(2022, 6, 29, 8, 1, 52, 622280): (576, 137),
                 datetime(2022, 6, 29, 8, 1, 52, 643309): (577, 137),
                 datetime(2022, 6, 29, 8, 1, 52, 664836): (578, 138),
                 datetime(2022, 6, 29, 8, 1, 52, 702974): (583, 137),
                 datetime(2022, 6, 29, 8, 1, 52, 724816): (585, 136),
                 datetime(2022, 6, 29, 8, 1, 52, 748344): (587, 136),
                 datetime(2022, 6, 29, 8, 1, 52, 773135): (588, 136),
                 datetime(2022, 6, 29, 8, 1, 52, 798331): (590, 136),
                 datetime(2022, 6, 29, 8, 1, 52, 819660): (592, 137),
                 datetime(2022, 6, 29, 8, 1, 52, 841339): (595, 138),
                 datetime(2022, 6, 29, 8, 1, 52, 862830): (596, 138),
                 datetime(2022, 6, 29, 8, 1, 52, 885088): (598, 138),
                 datetime(2022, 6, 29, 8, 1, 52, 906591): (599, 138),
                 datetime(2022, 6, 29, 8, 1, 52, 927767): (600, 136),
                 datetime(2022, 6, 29, 8, 1, 52, 948623): (602, 135),
                 datetime(2022, 6, 29, 8, 1, 52, 969527): (605, 136),
                 datetime(2022, 6, 29, 8, 1, 52, 990323): (608, 135),
                 datetime(2022, 6, 29, 8, 1, 53, 10849): (611, 135),
                 datetime(2022, 6, 29, 8, 1, 53, 38586): (613, 135),
                 datetime(2022, 6, 29, 8, 1, 53, 59423): (614, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 81224): (618, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 106001): (620, 133),
                 datetime(2022, 6, 29, 8, 1, 53, 127802): (622, 133),
                 datetime(2022, 6, 29, 8, 1, 53, 150665): (625, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 172754): (626, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 196784): (628, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 218671): (633, 135),
                 datetime(2022, 6, 29, 8, 1, 53, 240716): (635, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 262914): (638, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 284902): (640, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 307763): (640, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 331092): (640, 134),
                 datetime(2022, 6, 29, 8, 1, 53, 358596): (641, 133),
                 datetime(2022, 6, 29, 8, 1, 53, 380916): (643, 133),
                 datetime(2022, 6, 29, 8, 1, 53, 406375): (646, 132),
                 datetime(2022, 6, 29, 8, 1, 53, 429097): (650, 132),
                 datetime(2022, 6, 29, 8, 1, 53, 450755): (650, 132),
                 datetime(2022, 6, 29, 8, 1, 53, 472202): (652, 133),
                 datetime(2022, 6, 29, 8, 1, 53, 494683): (657, 131),
                 datetime(2022, 6, 29, 8, 1, 53, 517844): (660, 130),
                 datetime(2022, 6, 29, 8, 1, 53, 539857): (664, 129),
                 datetime(2022, 6, 29, 8, 1, 53, 561912): (668, 128),
                 datetime(2022, 6, 29, 8, 1, 53, 583594): (669, 128),
                 datetime(2022, 6, 29, 8, 1, 53, 604895): (672, 128),
                 datetime(2022, 6, 29, 8, 1, 53, 646850): (677, 127),
                 datetime(2022, 6, 29, 8, 1, 53, 668370): (680, 127),
                 datetime(2022, 6, 29, 8, 1, 53, 690796): (682, 127),
                 datetime(2022, 6, 29, 8, 1, 53, 736023): (687, 126),
                 datetime(2022, 6, 29, 8, 1, 53, 757554): (689, 126),
                 datetime(2022, 6, 29, 8, 1, 53, 785312): (693, 126),
                 datetime(2022, 6, 29, 8, 1, 53, 809950): (695, 126),
                 datetime(2022, 6, 29, 8, 1, 53, 831233): (696, 125),
                 datetime(2022, 6, 29, 8, 1, 53, 852633): (697, 125),
                 datetime(2022, 6, 29, 8, 1, 53, 874386): (699, 125),
                 datetime(2022, 6, 29, 8, 1, 53, 896869): (701, 125),
                 datetime(2022, 6, 29, 8, 1, 53, 918615): (703, 125),
                 datetime(2022, 6, 29, 8, 1, 54, 50321): (736, 126),
                 datetime(2022, 6, 29, 8, 1, 54, 71227): (741, 126),
                 datetime(2022, 6, 29, 8, 1, 54, 227116): (751, 124),
                 datetime(2022, 6, 29, 8, 1, 54, 250250): (754, 123)}

    points = [[263, 236], [436, 231], [233, 285], [439, 282]]
    M, M_inverse = cal_perspective_params(img, points)

    new_route = cal_route(old_route, M)
    transform_img = img_perspect_transform(img, M)

    last = []
    for now in new_route.items():
        if not last == []:
            now_time, now_point = now[0], now[1]
            last_time, last_point = last[0], last[1]
            # cal speed
            del_time = now_time-last_time
            del_x = now_point[0] - last_point[0]
            del_y = now_point[1] - last_point[1]
            dis = math.sqrt(del_x**2 + del_y ** 2)
            speed = 3.5*dis/160/del_time.total_seconds() *3.6
            print(str(speed)+"km/h")
            # draw
            cv2.line(transform_img, now_point, last_point, (255, 0, 0), thickness=2, lineType=8)
        last = now

    cv2.imwrite('E:/repos/Vehicle-tracking/application/main/inference/output/img.jpg', transform_img)
    cv2.waitKey(0)

    plt.subplot(1, 2, 1)
    plt.imshow(img[:, :, ::-1])
    plt.subplot(1, 2, 2)
    plt.imshow(transform_img[:, :, ::-1])
    plt.show()

    # -*- coding:utf-8 -*-

    # 处理乱码

    # matplotlib.rcParams['font.sans-serif'] = ['SimHei']  # 用黑体显示中文
    # x = [133.3256, 166.6571, 199.9885, 233.3199, 266.6513, 299.9827, 333.3141, 366.6455, 399.9769, 433.3084, 466.6398,
    #      499.9712, 533.3026, 566.634, 599.9654, 633.2968, 666.6282, 699.9597, 733.2911, 766.6225, 799.9539, 833.2853,
    #      866.6167, 899.9481, 933.2795, 966.611, 999.9424, 1033.274, 1066.605, 1099.937, 1133.268, 1166.599, 1199.931,
    #      1233.262, 1266.594, 1299.925, 1333.256, 1366.588, 1399.919, 1433.251, 1466.582, 1499.914, 1533.245, 1566.576,
    #      1599.908, 1633.239, 1666.571, 1699.902, 1733.233, 1766.565, 1799.896, 1833.228, 1866.559, 1966.553, 1999.885,
    #      2033.216, 2066.548, 2199.873, 2333.199, 2599.85, 2633.182, 2666.513, 2766.507, 3199.816, 3233.147, 3266.478,
    #      3299.81, 3333.141, 3366.473, 3399.804, 3433.135, 3466.467, 3499.798, 3533.13, 3566.461, 3599.793, 3633.124,
    #      3666.455, 3699.787, 3733.118, 3766.45, 3933.107, 4033.101, 4066.432, 4199.758, 4233.089, 4299.752, 4333.084,
    #      4466.409, 4499.741, 4533.072, 4566.403, 4599.735, 4633.066, 4666.398, 4699.729, 4733.061, 4766.392, 4799.723,
    #      4833.055, 4866.386, 4966.38, 4999.712, 5033.043, 5133.037, 5166.369, 5199.7, 5599.677, 5633.009, 5666.34,
    #      5699.671, 5733.003, 5799.666, 5832.997, 5866.329, 5899.66, 5932.991, 5966.323, 5999.654, 6032.986, 6066.317,
    #      6099.648, 6132.98, 6166.311, 6199.643, 6232.974, 6266.305, 6299.637, 6332.968, 6366.3, 6399.631, 6432.963,
    #      6466.294, 6499.625, 6532.957, 6566.288, 6599.62, 6632.951, 6666.282, 6699.614, 6732.945, 6766.277, 6799.608,
    #      6832.939, 6866.271, 6899.602, 6932.934, 6966.265, 6999.597, 7032.928, 7066.259, 7099.591, 7132.922, 7199.585,
    #      7232.916, 7266.248, 7332.911, 7366.242, 7399.573, 7432.905, 7466.236, 7499.568, 7532.899, 7566.231, 7599.562,
    #      7832.882, 7866.213, 8132.865, 8166.196]
    # y = [9.4505447, 10.56603019, 23.7441997, 11.81318087, 7.471311595, 3.341272122, 5.283015093, 4.72527235,
    #      3.341272122, 21.39458051, 14.94262319, 7.087908525, 9.4505447, 4.72527235, 7.471311595, 2.362636175,
    #      3.341272122, 2.362636175, 9.741398504, 4.72527235, 2.362636175, 9.741398504, 11.81318087, 2.362636175,
    #      3.341272122, 11.81318087, 9.741398504, 4.72527235, 9.741398504, 5.283015093, 5.283015093, 11.81318087,
    #      7.087908525, 7.471311595, 9.4505447, 0, 4.72527235, 3.341272122, 9.741398504, 4.72527235, 5.283015093,
    #      5.283015093, 7.471311595, 9.4505447, 9.4505447, 9.741398504, 9.741398504, 5.283015093, 5.283015093,
    #      2.362636175, 9.741398504, 5.283015093, 9.741398504, 4.01570932, 9.4505447, 17.20025098, 9.741398504,
    #      7.185677399, 7.880374538, 7.240092225, 14.17581705, 7.087908525, 2.490437198, 5.204277229, 0, 42.59302937,
    #      9.741398504, 9.741398504, 8.518605874, 7.471311595, 7.471311595, 9.4505447, 0, 11.81318087, 9.741398504,
    #      9.741398504, 8.518605874, 30.71427027, 9.741398504, 10.02381636, 21.13206037, 8.359860177, 6.349393936,
    #      4.72527235, 6.682544243, 4.72527235, 7.564126478, 0, 14.22495348, 13.36508849, 12.04712796, 12.04712796,
    #      9.4505447, 14.17581705, 4.72527235, 15.12825296, 21.13206037, 18.45277842, 18.45277842, 12.72318518,
    #      4.72527235, 3.150181567, 11.81318087, 16.70636061, 8.805025156, 16.70636061, 4.72527235, 16.66221606,
    #      11.81318087, 12.04712796, 4.72527235, 14.3713548, 19.08477777, 21.78242925, 12.04712796, 4.72527235,
    #      11.81318087, 14.3713548, 15.84904528, 7.471311595, 9.4505447, 4.72527235, 36.90555684, 23.62636175,
    #      15.84904528, 26.41507547, 16.53845322, 11.81318087, 20.04763273, 21.26372557, 25.55581762, 9.741398504,
    #      15.84904528, 7.087908525, 9.4505447, 23.38890485, 25.55581762, 16.70636061, 11.81318087, 0, 0, 20.04763273,
    #      11.81318087, 29.60374642, 23.62636175, 0, 16.70636061, 60.3744851, 31.69809056, 35.98660208, 38.16955554,
    #      4.72527235, 16.53845322, 22.41393479, 16.53845322, 11.81318087, 21.29651469, 11.81318087, 23.7441997,
    #      9.4505447, 26.93819705, 4.72527235, 11.81318087, 12.04712796, 11.81318087, 24.24978036, 28.3516341,
    #      11.76879807, 39.1085875]

    average_x = []
    average_y = []
    temp_y, temp_x = 0, 0
    last_index = 0
    num = 15
    for index in range(len(x)):
        if index % num == 0 and index != 0:
            average_x.append(temp_x/num)
            average_y.append(temp_y/num)
            temp_y, temp_x = y[index], x[index]
        if index % num != 0:
            temp_y += y[index]
            temp_x += x[index]



    # average_y.append(temp_y)
    # # average_x.append(x[len(x) - 1] - x[last_index])
    #
    # # "r" 表示红色，ms用来设置*的大小
    # plt.plot(average_x, average_y, "r", ms=10, label="a")
    # # plt.plot([1, 2, 3, 4], [20, 30, 80, 40], label="b")
    # plt.xticks(rotation=45)
    # plt.xlabel("time")
    # plt.ylabel("km/h")
    # plt.title("id:1")
    # # upper left 将图例a显示到左上角
    # plt.legend(loc="upper left")
    # # 在折线图上显示具体数值, ha参数控制水平对齐方式, va控制垂直对齐方式
    # plt.savefig("a.jpg")
    # plt.show()
